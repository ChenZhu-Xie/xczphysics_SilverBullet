{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"sum",
				"\\sum_{min}^{max}"
			],
			[
				"highl",
				"highlight"
			]
		]
	},
	"buffers":
	[
		{
			"file": "Library/Git.md",
			"settings":
			{
				"buffer_size": 29769,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					54,
					1,
					"paste",
					null,
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAM17AAAAAAAAAAAAAAAA8L8"
				],
				[
					58,
					1,
					"revert",
					null,
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABBdwAAAAAAAEF3AAAAAAAAAAAAAAAA8L8"
				],
				[
					66,
					1,
					"revert",
					null,
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAABp3AAAAAAAAAAAAAAAA8L8"
				]
			]
		}
	],
	"build_system": "",
	"build_system_choices":
	[
		[
			[
				[
					"Packages/LaTeXTools/Compile to PDF.sublime-build",
					""
				],
				[
					"Packages/LaTeXTools/Compile to PDF.sublime-build",
					"Traditional Builder"
				],
				[
					"Packages/LaTeXTools/Compile to PDF.sublime-build",
					"Traditional Builder with PdfLaTeX"
				],
				[
					"Packages/LaTeXTools/Compile to PDF.sublime-build",
					"Traditional Builder with XeLaTeX"
				],
				[
					"Packages/LaTeXTools/Compile to PDF.sublime-build",
					"Traditional Builder with LuaLaTeX"
				],
				[
					"Packages/LaTeXTools/Compile to PDF.sublime-build",
					"Basic Builder"
				],
				[
					"Packages/LaTeXTools/Compile to PDF.sublime-build",
					"Basic Builder with PdfLaTeX"
				],
				[
					"Packages/LaTeXTools/Compile to PDF.sublime-build",
					"Basic Builder with XeLaTeX"
				],
				[
					"Packages/LaTeXTools/Compile to PDF.sublime-build",
					"Basic Builder with LuaLaTeX"
				],
				[
					"Packages/LaTeXTools/Compile to PDF.sublime-build",
					"Script Builder"
				]
			],
			[
				"Packages/LaTeXTools/Compile to PDF.sublime-build",
				"Basic Builder with PdfLaTeX"
			]
		],
		[
			[
				[
					"Packages/LaTeXTools/LaTeX.sublime-build",
					""
				],
				[
					"Packages/LaTeXTools/LaTeX.sublime-build",
					"Traditional"
				],
				[
					"Packages/LaTeXTools/LaTeX.sublime-build",
					"PdfLaTeX"
				],
				[
					"Packages/LaTeXTools/LaTeX.sublime-build",
					"XeLaTeX"
				],
				[
					"Packages/LaTeXTools/LaTeX.sublime-build",
					"LuaLaTeX"
				],
				[
					"Packages/LaTeXTools/LaTeX.sublime-build",
					"Basic Builder"
				],
				[
					"Packages/LaTeXTools/LaTeX.sublime-build",
					"Basic Builder - PdfLaTeX"
				],
				[
					"Packages/LaTeXTools/LaTeX.sublime-build",
					"Basic Builder - XeLaTeX"
				],
				[
					"Packages/LaTeXTools/LaTeX.sublime-build",
					"Basic Builder - LuaLaTeX"
				],
				[
					"Packages/LaTeXTools/LaTeX.sublime-build",
					"Script Builder"
				]
			],
			[
				"Packages/LaTeXTools/LaTeX.sublime-build",
				"Traditional"
			]
		],
		[
			[
				[
					"Packages/LaTeXTools/LaTeX.sublime-build",
					""
				],
				[
					"Packages/LaTeXTools/LaTeX.sublime-build",
					"Traditional Builder"
				],
				[
					"Packages/LaTeXTools/LaTeX.sublime-build",
					"Traditional Builder with PdfLaTeX"
				],
				[
					"Packages/LaTeXTools/LaTeX.sublime-build",
					"Traditional Builder with XeLaTeX"
				],
				[
					"Packages/LaTeXTools/LaTeX.sublime-build",
					"Traditional Builder with LuaLaTeX"
				],
				[
					"Packages/LaTeXTools/LaTeX.sublime-build",
					"Basic Builder"
				],
				[
					"Packages/LaTeXTools/LaTeX.sublime-build",
					"Basic Builder with PdfLaTeX"
				],
				[
					"Packages/LaTeXTools/LaTeX.sublime-build",
					"Basic Builder with XeLaTeX"
				],
				[
					"Packages/LaTeXTools/LaTeX.sublime-build",
					"Basic Builder with LuaLaTeX"
				],
				[
					"Packages/LaTeXTools/LaTeX.sublime-build",
					"Script Builder"
				]
			],
			[
				"Packages/LaTeXTools/LaTeX.sublime-build",
				"Traditional Builder with XeLaTeX"
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"chang",
				"Pieces: Change LLM"
			],
			[
				"change l",
				"Pieces: Change LLM"
			],
			[
				"chan",
				"Pieces: Change LLM"
			],
			[
				"packag ins",
				"Package Control: Install Package"
			],
			[
				"prefer",
				"Preferences: Settings"
			],
			[
				"compile",
				"Build With: Compile to PDF - Traditional Builder with XeLaTeX"
			],
			[
				"packa con upd",
				"Package Control: Upgrade All Packages"
			],
			[
				"iew Package Fil",
				"View Package File"
			],
			[
				"quick",
				"QuickLineNavigator: Clear All Keyword Highlights"
			],
			[
				"quick temp",
				"QuickLineNavigator: Toggle Extension Filters (Temporary)"
			],
			[
				"quick filter",
				"QuickLineNavigator: Toggle Extension Filters (Temporary)"
			],
			[
				"quick  temp",
				"QuickLineNavigator: Toggle Extension Filters (Temporary)"
			],
			[
				"quick clea",
				"QuickLineNavigator: Clear All Keyword Highlights"
			],
			[
				"list packa",
				"Package Control: List Packages"
			],
			[
				"QUICK folder",
				"QuickLineNavigator: Search in Folder"
			],
			[
				"QUICK open",
				"QuickLineNavigator: Search in Open Files"
			],
			[
				"pac control ",
				"Package Control: Install Package"
			],
			[
				"pices chang",
				"Pieces: Change LLM"
			],
			[
				"pieces change",
				"Pieces: Change LLM"
			],
			[
				"packa con",
				"Package Control: Install Package"
			],
			[
				"latex build ",
				"Build With: LaTeX - Traditional Builder with XeLaTeX"
			],
			[
				"satis",
				"Package Control: Satisfy Packages"
			],
			[
				"install packa",
				"Package Control: Install Package"
			],
			[
				"package remo",
				"Package Control: Remove Package"
			],
			[
				"list pa",
				"Package Control: List Packages"
			],
			[
				"latex bui",
				"Build With: LaTeX - Basic Builder - XeLaTeX"
			],
			[
				"packa sa",
				"Package Control: Satisfy Packages"
			],
			[
				"packa list",
				"Package Control: List Packages"
			],
			[
				"build latex",
				"Build With: LaTeX - Basic Builder - XeLaTeX"
			],
			[
				"build",
				"Build With: LaTeX - Basic Builder - XeLaTeX"
			],
			[
				"latex",
				"Build With: LaTeX - Basic Builder - XeLaTeX"
			],
			[
				"list pack",
				"Package Control: List Packages"
			],
			[
				"packa satis",
				"Package Control: Satisfy Packages"
			],
			[
				"packa lis",
				"Package Control: List Packages"
			],
			[
				"build ",
				"Build With: LaTeX - Basic Builder - XeLaTeX"
			],
			[
				"Package Control: list",
				"Package Control: List Packages"
			],
			[
				"Package Control: ",
				"Package Control: Clear Cache Directory"
			],
			[
				"pacage sati",
				"Package Control: Satisfy Libraries"
			],
			[
				"pacage ins",
				"Package Control: Install Package"
			],
			[
				"pac",
				"Package Control: Satisfy Libraries"
			],
			[
				"package ",
				"Package Control: Satisfy Packages"
			],
			[
				"packa sat",
				"Package Control: List Packages"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"latex build",
				"Build With: LaTeX - Basic Builder - XeLaTeX"
			],
			[
				"package inst",
				"Package Control: Install Package"
			],
			[
				"package satis",
				"Package Control: Satisfy Libraries"
			],
			[
				"package upda",
				"Package Control: Upgrade All Packages"
			],
			[
				"package ins",
				"Package Control: Install Package"
			],
			[
				"package sa",
				"Package Control: Satisfy Packages"
			],
			[
				"Package Control: Satisfy Libraries",
				"Package Control: Satisfy Libraries"
			],
			[
				"view",
				"View: Toggle Menu"
			],
			[
				"packa control list",
				"Package Control: List Packages"
			],
			[
				"packa contro lis",
				"Package Control: List Packages"
			],
			[
				"build with ",
				"Build With: LaTeX - Traditional Builder"
			],
			[
				"latextool",
				"Preferences: LaTeXTools Mouse Bindings"
			],
			[
				"Package Control: INS",
				"Package Control: Install Package"
			],
			[
				"Package Control: INST",
				"Package Control: Install Package"
			],
			[
				"Package Control: INSTALL",
				"Package Control: Install Package"
			],
			[
				"Package Control: in",
				"Package Control: Install Package"
			],
			[
				"paca instal",
				"Package Control: Install Package"
			],
			[
				"Package Control: inst",
				"Package Control: Install Package"
			],
			[
				"Package Control: install",
				"Package Control: Install Package"
			],
			[
				"pieces",
				"Pieces: Open Pieces Settings"
			],
			[
				"Package Control: up",
				"Package Control: Upgrade Package"
			],
			[
				"packa",
				"Preferences: Browse Packages"
			],
			[
				"Package",
				"Preferences: Browse Packages"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 277.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/F/Note_book/SilverBullet/1.local_server/SB_space",
		"/F/Note_book/SilverBullet/1.local_server/SB_space/ENHANCE",
		"/F/Note_book/SilverBullet/1.local_server/SB_space/Library"
	],
	"file_history":
	[
		"/F/Note_book/SilverBullet/备份/Git.md/Git - 以 md 分段 2.md",
		"/F/Note_book/SilverBullet/备份/Git.md/Git - 3 大面积引入 warning 样式.md",
		"/F/Note_book/SilverBullet/备份/Git.md/Git - 以 md 分段.md",
		"/F/Note_book/SilverBullet/备份/Git.md/Git - 2 大面积引入 warning 样式.md",
		"/F/Note_book/SilverBullet/备份/Git.md/Git - 3 大面积引入 warning 样式 - 副本.md",
		"/F/Note_book/SilverBullet/备份/Git.md/Git - 3.1 修复最后 2 个 git config 不正确运行的问题.md",
		"/F/Note_book/SilverBullet/备份/Git.md/Git - 大面积引入 warning 样式.md",
		"/F/Note_book/SilverBullet/备份/Git.md/Git - 3 修复最后 2 个 git config 不正确运行的问题.md",
		"/F/Note_book/SilverBullet/备份/Git.md/Git - 多一些 git configure 的调试信息 - 副本.md",
		"/F/Note_book/SilverBullet/备份/Git.md/Git - 从下述回退：尝试修复 强制push 的第 3 步后，没有正确初始化.git 配置 - 副本.md",
		"/F/Note_book/SilverBullet/备份/Git.md/Git - 从下述回退：尝试修复 强制push 的第 3 步后，没有正确初始化.git 配置.md",
		"/F/Note_book/SilverBullet/备份/Git.md/Git - 修复 非 commit 的所有 3 步 sync 的第 1 步 commit - 副本.md",
		"/F/Note_book/SilverBullet/备份/Git.md/Git - 修复 非 commit 的所有 3 步 sync 的第 1 步 commit.md",
		"/F/Note_book/SilverBullet/备份/Git.md/Git - fix pull only messages bug.md",
		"/F/Note_book/SilverBullet/备份/Git.md/Git - 取消 分多段 space-lua 块.md",
		"/F/Note_book/SilverBullet/备份/Git.md/Git - 取消每个git小函数前，都检查 .git 配置，只强制 push 的第 3 步检查.md",
		"/F/Note_book/SilverBullet/备份/Git.md/Git - 强制push 的第三步，和每个git小函数前，都检查 .git 配置.md",
		"/F/Note_book/SilverBullet/备份/Git.md/Git - 3 取消每个git小函数前，都检查 .git 配置，只强制 push 的第 3 步检查 - 副本.md",
		"/F/Note_book/SilverBullet/2.ETP-read_only(remote_1)/init.sh",
		"/F/Note_book/SilverBullet/备份/Git.md/Git - 取消每个git小函数前，都检查 .git 配置，只强制 push 的第 3 步检查 - 副本.md",
		"/F/Note_book/SilverBullet/备份/Git.md/Git - 修复 No remote URL found. 的问题.md",
		"/F/Note_book/SilverBullet/备份/Git.md/Git.md",
		"/F/Note_book/SilverBullet/2.ETP-read_only(remote_1)/fly.toml",
		"/F/Note_book/SilverBullet/3.xczphysics(remote_2)/init.sh",
		"/F/Note_book/SilverBullet/备份/Git.md/Git - 尝试 fix commit 报 nil 1.md",
		"/F/Note_book/SilverBullet/1.local_server/SB_space/Library/Git.md",
		"/F/Note_book/SilverBullet/备份/Git.md/Git - 尝试 fix commit 报 nil 3.md",
		"/F/Note_book/SilverBullet/备份/Git.md/Git - 尝试 fix commit 报 nil 2.md",
		"/F/Note_book/SilverBullet/2.ETP-read_only(remote_1)/Dockerfile",
		"/F/Note_book/SilverBullet/备份/Git.md/Git - 尝试 fix commit 报 nil 4.md",
		"/F/Note_book/SilverBullet/备份/Git.md/Git - fix pull only messages bug - 副本.md",
		"/D/C2D/Desktop/Git.md 备份/Git.md",
		"/D/C2D/Desktop/Git.md 备份/Git - b.md",
		"/D/C2D/Desktop/Git.md 备份/Git - 2.md",
		"/D/C2D/Desktop/Git.md 备份/Git - a.md",
		"/D/C2D/Desktop/Git.md 备份/Git - 副本.md",
		"/F/Note_book/SilverBullet/1.local_server/SB_space/.gitignore",
		"/F/Note_book/SilverBullet/1.local_server/SB_space/SB_space.sublime-workspace",
		"/E/Text_editor/SublimeText/Data/Packages/User/Preferences.sublime-settings",
		"/E/Text_editor/SublimeText/Data/Packages/Default/Preferences.sublime-settings",
		"/D/C2D/Desktop/article/LFCO/LFCO_iop/LFCO_iop.tex",
		"/D/C2D/Desktop/article/LFCO/LFCO_iop/iopjournal-template.tex",
		"/E/Text_editor/SublimeText/Data/Packages/新建文件夹/aura-theme.tmTheme",
		"/E/Text_editor/SublimeText/Data/Packages/新建文件夹/aura-theme-soft.tmTheme",
		"/D/C2D/Desktop/Code/Latex/TexStudio/0.njuthesis/NJU_thesis_doctor__xcz/docs/chapters/chapter3.tex",
		"/D/C2D/Desktop/Code/Latex/TexStudio/0.njuthesis/NJU_thesis_doctor__xcz/docs/chapters/chapter4.tex",
		"/D/C2D/Desktop/Code/Latex/TexStudio/0.njuthesis/NJU_thesis_doctor__xcz/docs/chapters/chapter2.tex",
		"/D/C2D/Desktop/Code/Latex/TexStudio/0.njuthesis/NJU_thesis_doctor__xcz/docs/njuthesis-sample.tex",
		"/D/C2D/Desktop/Code/Latex/TexStudio/0.njuthesis/NJU_thesis_doctor__xcz/docs/njuthesis-setup.def",
		"/F/Note_book/SilverBullet/3.xczphysics(remote_2)/fly.toml",
		"/F/Note_book/SilverBullet/1.local_server/SB_space/LICENSE",
		"/F/Note_book/SilverBullet/3.xczphysics(remote_2)/Dockerfile",
		"/D/C2D/Desktop/stem.zh.tex",
		"/F/Note_book/SilverBullet/2.5.我的配置历史/4/fly.toml",
		"/F/Note_book/SilverBullet/2.5.我的配置历史/1.configurefile/fly.toml",
		"/F/Note_book/SilverBullet/2.5.我的配置历史/2.configurefiles/fly.toml",
		"/F/Note_book/SilverBullet/1.local_server/SB_space/_plug/treeview.plug.js",
		"/F/Note_book/SilverBullet/1.local_server/SB_space/_plug/git.plug.js",
		"/C/Windows/SystemApps/MicrosoftWindows.Client.Core_cw5n1h2txyewy/LiveCaptions/LiveCaptions.manifest",
		"/C/Windows/WinSxS/amd64_userexperience-sxs_31bf3856ad364e35_10.0.26100.4946_none_419dc00e72a8bc8a/57074914.Livtop/LiveCaptions/LiveCaptions.manifest",
		"/F/Note_book/SilverBullet/3.ETP/fly.toml",
		"/F/Note_book/SilverBullet/2.remote_server/fly.toml",
		"/F/Note_book/SilverBullet/2.remote_server/Dockerfile",
		"/F/Note_book/SilverBullet/2.remote_server/data/config.json",
		"/F/Note_book/SilverBullet/ETP/fly.toml",
		"/F/Note_book/SilverBullet/remote_server/fly.toml",
		"/F/Note_book/SilverBullet/remote_server/Dockerfile",
		"/F/Note_book/SilverBullet/remote_server/data/config.json",
		"/F/Note_book/SilverBullet/remote_server/config.json",
		"/F/Note_book/SilverBullet/Dockerfile",
		"/F/Note_book/SilverBullet/configure.json",
		"/F/Note_book/SilverBullet/fly.toml",
		"/e/Runtime/texlive/2024/texmf-dist/tex/latex/mathtools/mathtools.sty",
		"/D/C2D/Desktop/Code/Latex/TexStudio/0.njuthesis/NJU_thesis_doctor__xcz/docs/chapters/chapter0.tex",
		"/D/C2D/Desktop/Code/Latex/TexStudio/0.njuthesis/NJU_thesis_doctor__xcz/docs/tmp/fonts_installed",
		"/D/C2D/Desktop/Code/Latex/TexStudio/0.njuthesis/NJU_thesis_doctor__xcz/.vscode/settings.json",
		"/E/Text_editor/SublimeText/Data/Packages/User/QuickLineNavigator.sublime-settings",
		"/D/C2D/Desktop/Code/Python/projects/QuickLineNavigator/manual_version_control/quick_line_navigator - 3.33 关键词 可保存情况下，尝试修复 switch 搜索命令的 bug.py",
		"/D/C2D/Desktop/Code/Latex/TexStudio/0.njuthesis/NJU_thesis_doctor__xcz/docs/TeXstudio_Compile_Settings.txsprofile",
		"/D/C2D/Desktop/Code/Python/projects/QuickLineNavigator/QuickLineNavigator.sublime-settings",
		"/D/C2D/Desktop/Code/Python/projects/QuickLineNavigator/quick_line_navigator.py",
		"/D/C2D/Desktop/Code/Latex/TexStudio/0.njuthesis/NJU_thesis_doctor__xcz/docs/tmp/chapters/chapter4.aux",
		"/D/C2D/Desktop/Code/Python/projects/package_control_channel/repository/q.json",
		"/E/Text_editor/SublimeText/Data/Packages/QuickLineNavigator/QuickLineNavigator.sublime-settings",
		"/C/Users/Xcz/AppData/Roaming/Mesh Intelligent Technologies, Inc/Pieces OS/shared_preferences.json",
		"/D/C2D/Desktop/Code/Python/projects/package_control_channel/repository.json",
		"/E/Text_editor/SublimeText/Data/Packages/User/rg_fzf_search.sublime-settings",
		"/E/Text_editor/SublimeText/Data/Packages/Usersnippets/hlp.sublime-snippet",
		"/D/C2D/Desktop/Code/Latex/TexStudio/0.njuthesis/NJU_thesis_doctor__xcz/docs/doc.sublime-project",
		"/E/Text_editor/SublimeText/Data/Packages/Usersnippets/subequations.sublime-snippet",
		"/E/Text_editor/SublimeText/Data/Packages/Usersnippets/align.sublime-snippet",
		"/E/Text_editor/SublimeText/Data/Packages/Usersnippets/beq.sublime-snippet",
		"/F/Audio/LiveCaptionsTranslator/setting.json",
		"/F/Audio/LunaTranslator_x64_win10/translation_record/0_copy.json",
		"/E/Text_editor/SublimeText/Data/Packages/Usersnippets/bb.sublime-snippet",
		"/E/Text_editor/SublimeText/Data/Packages/Usersnippets/PineGreen.sublime-snippet",
		"/E/Text_editor/SublimeText/Data/Packages/Usersnippets/Plum.sublime-snippet",
		"/E/Text_editor/SublimeText/Data/Packages/Usersnippets/NavyBlue.sublime-snippet",
		"/E/Text_editor/SublimeText/Data/Packages/Usersnippets/Maroon.sublime-snippet",
		"/E/Text_editor/SublimeText/Data/Packages/Usersnippets/gray.sublime-snippet",
		"/E/Text_editor/SublimeText/Data/Packages/Usersnippets/plum.sublime-snippet",
		"/E/Text_editor/SublimeText/Data/Packages/Usersnippets/pl.sublime-snippet",
		"/E/Text_editor/SublimeText/Data/Packages/Usersnippets/pl - 副本.sublime-snippet",
		"/E/Text_editor/SublimeText/Data/Packages/Usersnippets/gr - 副本.sublime-snippet",
		"/E/Text_editor/SublimeText/Data/Packages/Usersnippets/gr.sublime-snippet",
		"/E/Text_editor/SublimeText/Data/Packages/Usersnippets/br.sublime-snippet",
		"/E/Text_editor/SublimeText/Data/Packages/Usersnippets/b.sublime-snippet",
		"/C/Users/Xcz/.wakatime.cfg",
		"/D/CtoD/Default/桌面/直播/my-youtube-api-project-468104-3ce4bf9fb8af.json",
		"/D/CtoD/Default/桌面/Code/Latex/TexStudio/0.njuthesis/NJU_thesis_doctor__xcz/docs/chapters/chapter4.tex",
		"/D/CtoD/Default/下载/未命名_2.json",
		"/D/CtoD/Default/桌面/Copy_History/log/20250806_copy_History.txt",
		"/E/Application/Noter/siyuan_data1/data/plugins/wakatime/plugin.json",
		"/E/Application/Text_Editor/SublimeText/Data/Packages/User/WakaTime.sublime-settings",
		"/E/Application/Text_Editor/SublimeText/Data/Packages/User/LaTeXTools.sublime-settings",
		"/E/Application/Text_Editor/SublimeText/Data/Packages/LaTeXTools/dependencies.json",
		"/E/Application/Text_Editor/SublimeText/Data/Packages/User/Default (Windows).sublime-keymap",
		"/D/CtoD/Default/下载/必看_安装配置步骤.txt",
		"/C/Windows/WinSxS/amd64_userexperience-core_31bf3856ad364e35_10.0.26100.4768_none_53d315517add2b01/Core/LiveCaptions/LiveCaptions.manifest",
		"/C/Windows/WinSxS/amd64_userexperience-sxs_31bf3856ad364e35_10.0.26100.4652_none_41bf8b3c728f1b8a/57074914.Livtop/LiveCaptions/LiveCaptions.manifest",
		"/C/Windows/SystemApps/SxS/MicrosoftWindows.57074914.Livtop_cw5n1h2txyewy/LiveCaptions/LiveCaptions.manifest",
		"/D/C2D/Desktop/Code/Latex/TexStudio/0.njuthesis/NJU_thesis_doctor__xcz/docs/doc.sublime-workspace",
		"/E/Text_editor/SublimeText/Data/Packages/User/Side Bar.sublime-settings",
		"/E/Text_editor/SublimeText/Data/Packages/LaTeXTools/Default (Windows).sublime-keymap",
		"/E/Text_editor/SublimeText/Data/Cache/LaTeXTools/internal/preview_math/98c9d979a2e543f1398f3d1f4339bc60.png.err",
		"/D/C2D/Desktop/Code/Latex/TexStudio/0.njuthesis/NJU_thesis_doctor__xcz/docs/chapters/chapter1.tex",
		"/D/C2D/Desktop/Code/Latex/TexStudio/0.njuthesis/NJU_thesis_doctor__xcz/docs/chapters/chapter5.tex",
		"/D/C2D/Desktop/Code/Latex/TexStudio/0.njuthesis/NJU_thesis_doctor__xcz/docs/latex.sublime-workspace"
	],
	"find":
	{
		"height": 40.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"Auto-sync manager (SIMPLIFIED - no explicit locking, core functions handle it)",
			"configuration",
			"Auto-sync manager",
			"继续",
			"executeCommand",
			"n GitConfigValidator:setConfigValue(key, value, scope)",
			"tConfigValidator:validateAndSetup",
			"tConfigValidator:validateAndSetup(afterDeletion)",
			"GitConfigValidator:validateAndSetu",
			"tConfigValidator:validateAndSetu",
			"initializeRepository",
			"local maxRetries = 10",
			"GitConfigValidator:validateAndSetu",
			"os.execute(\"sleep 0.5\") -- Unix/Linux",
			"on GitOperations.performForcePushInitial()",
			"onfigValidator:validateAnd",
			"onfigValidator:validateAndSe",
			"initializeRepository",
			"getOriginUrlFromInitScript",
			"itConfigValidator:validateAndSet",
			"(\"%s",
			"GitConfigValidator",
			"GitOperations",
			"```",
			"executeGitCommand",
			"\"push.autoSetupRemote\" = ",
			"\"push.autoSetupRemote\" = \"true\"",
			"local",
			"AutoSyncManager",
			"function commitChanges",
			"function addFiles",
			"executeGitCommand",
			"local",
			"local function",
			"executeGitCommand",
			"getErrorMessage",
			"GitOperations",
			"GitConfigValidator",
			"AutoSyncManager:performAutoSync(",
			"o-sync manager (SIMPLIFIED - no explicit locking, core functions handle it)",
			"至完整",
			"至完整 ",
			"uto-sync manager (SIMPLIFIED - no explicit locking, core functions handle it)",
			"AutoSyncManager:performAutoSync(syncType)",
			"itOperations.getRemoteUrl()",
			"GitOperations.getRemoteUrl",
			"Operations.getRemoteUr",
			"client.js:341 Error running command Attempting to call nil as a function\n（匿名）\t@\tclient.js:341",
			"git force push 时",
			"Step 1: commit (make sure to show \"Step 1/3",
			"unction GitOperations.forcePull()",
			"git.forcePush = GitOperations.forcePush",
			"\"Git: Sync\"",
			"name=\"Git: Sync\"",
			"force pu"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"file": "Library/Git.md",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 29769,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								29769
							]
						],
						"settings":
						{
							"syntax": "Packages/Markdown/Markdown.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 15908.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 40.0
	},
	"input":
	{
		"height": 204.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.Pieces Auth":
	{
		"height": 0.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.latextools":
	{
		"height": 237.0
	},
	"output.mdpopups":
	{
		"height": 0.0
	},
	"output.mdpopups-dummy":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "SB_space.sublime-project",
	"replace":
	{
		"height": 76.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"D:\\C2D\\Desktop\\Code\\Latex\\TexStudio\\0.njuthesis\\NJU_thesis_doctor__xcz\\docs\\doc.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 323.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 1344.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 267.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
